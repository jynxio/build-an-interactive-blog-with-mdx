3:I[9275,[],""]
5:I[1343,[],""]
6:I[231,["231","static/chunks/231-03c5593c17f5315d.js","931","static/chunks/app/page-bafaa68301c97db3.js"],""]
4:["slug","build-interative-blog","d"]
0:["CUmkH5DJcjBVKswMNcLs9",[[["",{"children":[["slug","build-interative-blog","d"],{"children":["__PAGE__?{\"slug\":\"build-interative-blog\"}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","build-interative-blog","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/build-the-interactive-blog-with-mdx/_next/static/css/56f865aa55fc953f.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},[["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","link",null,{"rel":"stylesheet","href":"https://cdn.jsdelivr.net/npm/water.css@2/out/dark.css"}]}],["$","body",null,{"children":[["$","header",null,{"style":{"display":"flex","gap":"1rem","fontSize":"1.5rem"},"children":[["$","$L6",null,{"href":"/","children":"Post"}],["$","$L6",null,{"href":"/rss","children":"RSS"}]]}],["$","main",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/build-the-interactive-blog-with-mdx/_next/static/css/5813510e8a17fb2f.css","precedence":"next","crossOrigin":"$undefined"}]],"$L7"]]]]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Build the interactive blog with MDX | _"}],["$","meta","3",{"property":"og:title","content":"Build the interactive blog with MDX | _"}],["$","meta","4",{"property":"og:image","content":"https://jynxio.github.io/build-the-interactive-blog-with-mdx/image-hosting/build-interative-blog/hero.png"}],["$","meta","5",{"property":"og:image:type","content":"image/png"}],["$","meta","6",{"property":"og:image:width","content":"1200"}],["$","meta","7",{"property":"og:image:height","content":"675"}],["$","meta","8",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","9",{"name":"twitter:title","content":"Build the interactive blog with MDX | _"}],["$","meta","10",{"name":"twitter:image","content":"https://jynxio.github.io/build-the-interactive-blog-with-mdx/image-hosting/build-interative-blog/hero.png"}],["$","meta","11",{"name":"twitter:image:type","content":"image/png"}],["$","meta","12",{"name":"twitter:image:width","content":"1200"}],["$","meta","13",{"name":"twitter:image:height","content":"675"}],["$","link","14",{"rel":"icon","href":"/build-the-interactive-blog-with-mdx/icon.png?0053dc943f2f015f","type":"image/png","sizes":"16x16"}]]
1:null
10:I[1063,["42","static/chunks/app/%5Bslug%5D/page-f202246b01348a98.js"],"default"]
2:[["$","h1",null,{"children":"Build the interactive blog with MDX"}],"\n",["$","p",null,{"children":"我在 2022 年就开始搭建自己的博客了，那时是因为我积累了很多的学习笔记，我希望可以把它们发布到公共网络上，但我不想被绑定在任何的内容平台上，所以我需要一个独立的博客"}],"\n",["$","p",null,{"children":"我花了至少两个月来搭建我的第一版博客，它很简陋也很称手，他的工作原理非常简单：使用 Node.js 和 marked.js 来将 markdown 转译成 HTML，然后在 HTML 中加上提前写好的 CSS，然后就可以发布了... 简单的甚至让人感觉到简陋，对吧？但我永远爱你。"}],"\n",["$","p",null,{"children":"到现在，我的博客已经来到第三个版本了，我在其中学到许多，并希望这些知识可以帮助到你。"}],"\n",["$","h2",null,{"children":"Before Getting Started"}],"\n",["$","p",null,{"children":["这篇文章会教你如何使用 Next.js 和 MDX 来制作一个可交互的博客，你可以从 ",["$","a",null,{"href":"https://jynxio.github.io/build-the-interactive-blog-with-mdx/","children":"这个 GitHub Pages"}]," 来提前预览最终效果，相关代码也全部托管在 ",["$","a",null,{"href":"https://github.com/jynxio/build-the-interactive-blog-with-mdx","children":"这个 GitHub 仓库"}]," 里，你可以从 Branch 中找到每一步的答案，祝你好运。😉"]}],"\n",["$","p",null,{"children":"这篇文章不适合所有人！你必须至少掌握初级的 Web 前端开发知识，以及了解 markdown 的语法。"}],"\n",["$","h2",null,{"children":"Setting Up the Project"}],"\n",["$","p",null,{"children":[["$","a",null,{"href":"https://github.com/jynxio/build-the-interactive-blog-with-mdx/tree/setting-up-the-project","children":"项目的初始模板"}]," 已经为你搭建好了，克隆它，然后启程。"]}],"\n",["$","h2",null,{"children":"Rendering Post Page"}],"\n",["$","p",null,{"children":"项目中已经实现创建好了 2 篇 Markdown 文章，它们在："}],"\n","$L8","\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"为什么这样存储文章？因为文章会有很多配套资源，将它们放在独立的专有的文件夹中会更好打理。"}],"\n"]}],"\n",["$","p",null,{"children":["接下来，你要把 ",["$","code",null,{"children":"build-blog-with-wdx"}]," 加载到网页中去。怎么做？直接用 Node.js 读取它，然后注入到网页中去，这一切都在 ",["$","code",null,{"children":"src/app/page.tsx"}]," 中完成。"]}],"\n","$L9","\n",["$","p",null,{"children":"现在，你的文章渲染到网页上去了，虽然很简陋。"}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":[["$","code",null,{"children":"reqPost"}]," 是什么？好吧，它就是一个用来读取本地文件的 Node.js 脚本，我用它来读取 Markdown 的内容。"]}],"\n","$La","\n",["$","p",null,{"children":[["$","code",null,{"children":"gray-matter"}]," 是什么？它是用来解析 markdown 的 front-matter 的第三方库。front-matter 又是什么？它是 markdown 开头用 ",["$","code",null,{"children":"---"}]," 栅栏围起来的东西，用来存放文章的信息，这些信息十分重要，你需要靠这些信息来制作文章清单，以及对文章做排序或归类。"]}],"\n","$Lb","\n"]}],"\n",["$","h2",null,{"children":"Beautify Post Page"}],"\n",["$","p",null,{"children":"页面现在很简陋，这是因为我直接把 Markdown 源码渲染到网页上去了，但这不是我想要的。怎样美化它呢？很简单，将 Markdown 转译成 HTML，然后再增加一些 CSS。"}],"\n",["$","p",null,{"children":["我使用 Hashicorp 的 ",["$","a",null,{"href":"https://github.com/hashicorp/next-mdx-remote","children":["$","code",null,{"children":"next-mdx-remote"}]}]," 来做转译工作，这个第三方库简单、靠谱、还支持 RSC。"]}],"\n","$Lc","\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":["为什么不用 Next.js 官方的 ",["$","a",null,{"href":"https://nextjs.org/docs/pages/building-your-application/configuring/mdx#nextmdx","children":["$","code",null,{"children":"@next/mdx"}]}],"？因为我根据官方文档的介绍来使用它时，发现无论如何都没办法处理 JSX，我已经彻底失去耐心了。😅"]}],"\n"]}],"\n",["$","p",null,{"children":["然后我用 ",["$","a",null,{"href":"https://github.com/kognise/water.css","children":["$","code",null,{"children":"water.css"}]}]," 来给页面添加样式，它是一整套预定义好的 CSS，非常适合用在这里来做原型演示。"]}],"\n","$Ld","\n",["$","h2",null,{"children":"Adding Syntax Highlighting"}],"\n",["$","p",null,{"children":"你注意到了吗？网页中的代码块还没有语法高亮，这是因为这就是代码块原本的模样。"}],"\n",["$","p",null,{"children":["语法高亮的原理是根据语法来解析代码字符串，然后拆分成不同的碎片，并给不同的碎片赋予不同的颜色。社区有很多第三方库都可以做这件事情，我选择 ",["$","a",null,{"href":"https://github.com/shikijs/shiki","children":["$","code",null,{"children":"shiki"}]}],"，因为它支持 VSCode 的所有颜色主题，并且还是 Astro 的底层依赖。"]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"shiki"}]," 的用法很简单，把代码字符串和语言类型丢给它，它就会给你输出一段包含样式的 HTML，这就是你想要的拥有语法高亮的代码块。",["$","code",null,{"children":"CodeSnippet"}]," 是一个封装了 ",["$","code",null,{"children":"shiki"}]," 的组件。"]}],"\n","$Le","\n",["$","p",null,{"children":["把 ",["$","code",null,{"children":"CodeSnippet"}]," 像下面这样传递给 ",["$","code",null,{"children":"<MDXRemote />"}],"，它会接管 ",["$","code",null,{"children":"<MDXRemote />"}]," 对代码块的处理工序。"]}],"\n","$Lf","\n",["$","p",null,{"children":"这样一来，代码块就好看多了！"}],"\n",["$","h2",null,{"children":"Parsing JSX in Markdown"}],"\n",["$","p",null,{"children":"Markdown 还有一种名为 MDX 的扩展语法，MDX = Markdown + JSX，也就是说我们可以在 Markdown 中使用 JSX！"}],"\n",["$","p",null,{"children":"它的原理是什么？MDX 转译器会在转译的时候就执行掉 JSX，比如 JavaScript 表达式和原生的 JSX 元素。等等... 只有原生的 JSX 元素吗？那么自定义的 JSX 组件呢？答案是「当然支持」😁，但前提是你必须事先将自定义组件传递给转译器，因为转译器怎么可能可以在不知道自定义组件是什么的前提下就处理它呢。"}],"\n",["$","p",null,{"children":["我事先创建好了一个 ",["$","code",null,{"children":"<MousePosition>"}]," 组件，就放在 ",["$","code",null,{"children":"post/build-interative-blog/component/mouse-position"}]," 文件夹里面，先来看看它的效果吧！"]}],"\n",["$","$L10",null,{}],"\n",["$","p",null,{"children":["这是怎么实现的呢？首先在 ",["$","code",null,{"children":"post/build-interative-blog/index.md"}]," 的任意位置引用这个自定义组件。"]}],"\n","$L11","\n",["$","p",null,{"children":["然后向 ",["$","code",null,{"children":"<CodeSnippet>"}]," 组件那样，也将 ",["$","code",null,{"children":"<MousePosition>"}]," 组件传递给 ",["$","code",null,{"children":"<MDXRemote>"}],"。"]}],"\n","$L12","\n",["$","p",null,{"children":"大功告成！快检查你的页面。"}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":["其实 ",["$","code",null,{"children":"CodeSnippet"}]," 就是一个自定义组件。"]}],"\n"]}],"\n",["$","h2",null,{"children":"Extra | Adding More Posts"}],"\n",["$","p",null,{"children":["真正的博客会有很多篇文章，所以我需要创建一个动态的文章页面，以及一个关于文章清单的页面。我要使用 Next.js 的 ",["$","a",null,{"href":"https://nextjs.org/docs/app/building-your-application/routing/dynamic-routes","children":"Dynamic Routes"}]," 来实现动态的文章页面，然后还要修改 ",["$","code",null,{"children":"src/app"}]," 下的目录结构，这样才能挤出位置来创建一个关于文章清单的页面。"]}],"\n",["$","p",null,{"children":["💡 答案：",["$","a",null,{"href":"","children":"Commit | Feat: Add More Posts"}],"。"]}],"\n",["$","h2",null,{"children":"Extra | Adding RSS Feed"}],"\n",["$","p",null,{"children":"许多内容型网站都会有 RSS 和 Newsletter，这两个工具的作用都是通知用户「网站更新了」，接下来我要给网站添加一个 RSS Feed，不过在那之前，RSS Feed究竟是什么？"}],"\n",["$","p",null,{"children":[["$","a",null,{"href":"http://localhost:3000/rss","children":"这"}]," 就是本站的 RSS Feed，它就是一串 XML 格式的字符串数据，代表本站的内容摘要，我会在发布新文章之后更新这个 RSS Feed。用户可以把这个 RSS Feed 丢给 RSS 阅读器，RSS 阅读器会监控这个 RSS Feed，然后在检测到更新行为之后通知用户。"]}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"RSS（Really Simple Syndication）是数据格式，RSS Feed 是符合 RSS 格式的数据。"}],"\n"]}],"\n",["$","p",null,{"children":["我的 RSS Feed 会根据文章清单来自动更新，这是用 Next.js 的 ",["$","a",null,{"href":"https://nextjs.org/docs/app/building-your-application/routing/route-handlers","children":"Route Handlers"}]," 来实现的。Route Handlers 是什么？一个用来处理「当用户向 ",["$","code",null,{"children":"https://www.jynxio.com/rss"}]," 这个 URL 发送网络请求时，服务器应该向用户返回什么内容」这件任务。显然，我的 Route Handlers（",["$","code",null,{"children":"src/app/rss/route.ts"}],"）会向 GET 请求返回一个 RSS Feed。"]}],"\n",["$","p",null,{"children":["💡 答案：",["$","a",null,{"href":"","children":"Commit | Feat: Add RSS Feed"}],"。"]}],"\n",["$","h2",null,{"children":"Extra | Adding Metadata"}],"\n",["$","p",null,{"children":"Metadata 是那些不直接显示在网页上，但又非常重要的信息，比如浏览器标签的 icon 和 title、社媒的 Open Graph。"}],"\n",["$","p",null,{"children":["💡 答案：",["$","a",null,{"href":"","children":"Commit | Feat: Add Icon and Open Graph"}],"。"]}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":["答案故意没有展示所有的 Metadata，不过你可以从类型文件中找到所有的 Metadata，请检查这个地址 ",["$","code",null,{"children":"node_modules/next/dist/lib/metadata/types/metadata-interface.d.ts"}],"。😉"]}],"\n"]}]]
8:["$","div",null,{"dangerouslySetInnerHTML":{"__html":"<pre class=\"shiki github-dark-dimmed\" style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#ADBAC7\">  |- ...</span></span>\n<span class=\"line\"><span style=\"color:#ADBAC7\">  |- post</span></span>\n<span class=\"line\"><span style=\"color:#8DDB8C\">+    |- build-blog-with-mdx</span></span>\n<span class=\"line\"><span style=\"color:#8DDB8C\">+    |- what-is-css-modules</span></span>\n<span class=\"line\"><span style=\"color:#ADBAC7\">  |- ...</span></span>\n<span class=\"line\"></span></code></pre>"}}]
b:["$","div",null,{"dangerouslySetInnerHTML":{"__html":"<pre class=\"shiki github-dark-dimmed\" style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>---</span></span>\n<span class=\"line\"><span>title: \"Title of your post\"</span></span>\n<span class=\"line\"><span>date: \"1970-01-01T00:00:00+0000\"</span></span>\n<span class=\"line\"><span>abstract: \"Abstract of your post\"</span></span>\n<span class=\"line\"><span>---</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>## Build the interactive blog with MDX</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>Here's the main content...</span></span>\n<span class=\"line\"><span></span></span></code></pre>"}}]
9:["$","div",null,{"dangerouslySetInnerHTML":{"__html":"<pre class=\"shiki github-dark-dimmed\" style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#ADBAC7\">  // 📃 src/app/page.tsx</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8DDB8C\">+ import { reqPost } from \"@/helper/post\";</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8DDB8C\">+ async function Page() {</span></span>\n<span class=\"line\"><span style=\"color:#8DDB8C\">+    const post = await reqPost(\"/post/build-interative-blog/index.md\");</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8DDB8C\">+    return &#x3C;article>{post.content}&#x3C;/article>;</span></span>\n<span class=\"line\"><span style=\"color:#ADBAC7\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ADBAC7\">export default Page;</span></span>\n<span class=\"line\"></span></code></pre>"}}]
13:T412,<pre class="shiki github-dark-dimmed" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#ADBAC7">  // 📃 src/app/page.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7">  import { reqPost } from "@/helper/post";</span></span>
<span class="line"><span style="color:#8DDB8C">+ import { MDXRemote } from "next-mdx-remote/rsc";</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7">  async function Page() {</span></span>
<span class="line"><span style="color:#ADBAC7">      const post = await reqPost("/post/build-interative-blog/index.md");</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8DDB8C">+     return &#x3C;MDXRemote source={post.content} />;</span></span>
<span class="line"><span style="color:#ADBAC7">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7">  export default Page;</span></span>
<span class="line"></span></code></pre>c:["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$13"}}]
14:T5d1,<pre class="shiki github-dark-dimmed" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#ADBAC7">  // 📃 src/app/layout.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7">  import "./index.css";</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7">  function RootLayout({ children }: { children: React.ReactNode }) {</span></span>
<span class="line"><span style="color:#ADBAC7">      return (</span></span>
<span class="line"><span style="color:#ADBAC7">          &#x3C;html lang="en"></span></span>
<span class="line"><span style="color:#ADBAC7">              &#x3C;head></span></span>
<span class="line"><span style="color:#8DDB8C">+                 &#x3C;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/water.css@2/out/dark.css" /></span></span>
<span class="line"><span style="color:#ADBAC7">              &#x3C;/head></span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7">              &#x3C;body>{children}&#x3C;/body></span></span>
<span class="line"><span style="color:#ADBAC7">          &#x3C;/html></span></span>
<span class="line"><span style="color:#ADBAC7">      );</span></span>
<span class="line"><span style="color:#ADBAC7">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7">  export default RootLayout;</span></span>
<span class="line"></span></code></pre>d:["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$14"}}]
15:T509,<pre class="shiki github-dark-dimmed" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#ADBAC7">  // 📃 src/app/page.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7">  import { reqPost } from "@/helper/post";</span></span>
<span class="line"><span style="color:#ADBAC7">  import { MDXRemote } from "next-mdx-remote/rsc";</span></span>
<span class="line"><span style="color:#ADBAC7">  import CodeSnippet from "@/component/code-snippet";</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7">  async function Page() {</span></span>
<span class="line"><span style="color:#ADBAC7">      const post = await reqPost("/post/build-interative-blog/index.md");</span></span>
<span class="line"><span style="color:#8DDB8C">+     const components = { pre: CodeSnippet };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8DDB8C">+     return &#x3C;MDXRemote source={post.content} components={components} />;</span></span>
<span class="line"><span style="color:#ADBAC7">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7">  export default Page;</span></span>
<span class="line"></span></code></pre>f:["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$15"}}]
11:["$","div",null,{"dangerouslySetInnerHTML":{"__html":"<pre class=\"shiki github-dark-dimmed\" style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#ADBAC7\">  // 📃 post/build-interative-blog/index.md</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ADBAC7\">  ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8DDB8C\">+ &#x3C;MousePosition /></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ADBAC7\">  ...</span></span>\n<span class=\"line\"></span></code></pre>"}}]
16:T5aa,<pre class="shiki github-dark-dimmed" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#ADBAC7">  // 📃 src/app/page.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7">  import { reqPost } from "@/helper/post";</span></span>
<span class="line"><span style="color:#ADBAC7">  import { MDXRemote } from "next-mdx-remote/rsc";</span></span>
<span class="line"><span style="color:#ADBAC7">  import CodeSnippet from "@/component/code-snippet";</span></span>
<span class="line"><span style="color:#8DDB8C">+ import MousePosition from "$/post/build-interative-blog/component/mouse-position";</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7">  async function Page() {</span></span>
<span class="line"><span style="color:#ADBAC7">      const post = await reqPost("/post/build-interative-blog/index.md");</span></span>
<span class="line"><span style="color:#8DDB8C">+     const components = { pre: CodeSnippet, MousePosition };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7">      return &#x3C;MDXRemote source={post.content} components={components} />;</span></span>
<span class="line"><span style="color:#ADBAC7">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7">  export default Page;</span></span>
<span class="line"></span></code></pre>12:["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$16"}}]
17:T108f,<pre class="shiki github-dark-dimmed" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#768390">// 📃 src/helper/post.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067">import</span><span style="color:#ADBAC7"> path </span><span style="color:#F47067">from</span><span style="color:#96D0FF"> "node:path"</span><span style="color:#ADBAC7">;</span></span>
<span class="line"><span style="color:#F47067">import</span><span style="color:#ADBAC7"> fs </span><span style="color:#F47067">from</span><span style="color:#96D0FF"> "node:fs/promises"</span><span style="color:#ADBAC7">;</span></span>
<span class="line"><span style="color:#F47067">import</span><span style="color:#ADBAC7"> matter </span><span style="color:#F47067">from</span><span style="color:#96D0FF"> "gray-matter"</span><span style="color:#ADBAC7">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067">async</span><span style="color:#F47067"> function</span><span style="color:#DCBDFB"> reqPost</span><span style="color:#ADBAC7">(</span><span style="color:#F69D50">url</span><span style="color:#F47067">:</span><span style="color:#6CB6FF"> string</span><span style="color:#ADBAC7">)</span><span style="color:#F47067">:</span><span style="color:#F69D50"> Promise</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">Post</span><span style="color:#ADBAC7">> {</span></span>
<span class="line"><span style="color:#F47067">    const</span><span style="color:#6CB6FF"> raw</span><span style="color:#F47067"> =</span><span style="color:#F47067"> await</span><span style="color:#DCBDFB"> readFile</span><span style="color:#ADBAC7">(url);</span></span>
<span class="line"><span style="color:#F47067">    const</span><span style="color:#ADBAC7"> { </span><span style="color:#F69D50">data</span><span style="color:#ADBAC7">: </span><span style="color:#6CB6FF">metadata</span><span style="color:#ADBAC7">, </span><span style="color:#6CB6FF">content</span><span style="color:#ADBAC7"> } </span><span style="color:#F47067">=</span><span style="color:#DCBDFB"> matter</span><span style="color:#ADBAC7">(raw);</span></span>
<span class="line"><span style="color:#F47067">    const</span><span style="color:#6CB6FF"> post</span><span style="color:#F47067">:</span><span style="color:#F69D50"> Post</span><span style="color:#F47067"> =</span><span style="color:#ADBAC7"> {</span></span>
<span class="line"><span style="color:#ADBAC7">        content,</span></span>
<span class="line"><span style="color:#ADBAC7">        slug: </span><span style="color:#96D0FF">""</span><span style="color:#ADBAC7">,</span></span>
<span class="line"><span style="color:#ADBAC7">        hero: metadata.hero,</span></span>
<span class="line"><span style="color:#ADBAC7">        date: metadata.date,</span></span>
<span class="line"><span style="color:#ADBAC7">        title: metadata.title,</span></span>
<span class="line"><span style="color:#ADBAC7">        abstract: metadata.abstract,</span></span>
<span class="line"><span style="color:#ADBAC7">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067">    return</span><span style="color:#ADBAC7"> post;</span></span>
<span class="line"><span style="color:#ADBAC7">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067">function</span><span style="color:#DCBDFB"> readFile</span><span style="color:#ADBAC7">(</span><span style="color:#F69D50">targetPath</span><span style="color:#F47067">:</span><span style="color:#6CB6FF"> string</span><span style="color:#ADBAC7">) {</span></span>
<span class="line"><span style="color:#F47067">    return</span><span style="color:#ADBAC7"> fs.</span><span style="color:#DCBDFB">readFile</span><span style="color:#ADBAC7">(path.</span><span style="color:#DCBDFB">join</span><span style="color:#ADBAC7">(process.</span><span style="color:#DCBDFB">cwd</span><span style="color:#ADBAC7">(), targetPath), </span><span style="color:#96D0FF">"utf8"</span><span style="color:#ADBAC7">);</span></span>
<span class="line"><span style="color:#ADBAC7">}</span></span>
<span class="line"></span></code></pre>a:["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$17"}}]
18:Tdc6,<pre class="shiki github-dark-dimmed" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#768390">// 📃 src/component/code-snippet/CodeSnippet.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067">import</span><span style="color:#ADBAC7"> { codeToHtml } </span><span style="color:#F47067">from</span><span style="color:#96D0FF"> "shiki"</span><span style="color:#ADBAC7">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067">type</span><span style="color:#F69D50"> Props</span><span style="color:#F47067"> =</span><span style="color:#F69D50"> React</span><span style="color:#ADBAC7">.</span><span style="color:#F69D50">DetailedHTMLProps</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">React</span><span style="color:#ADBAC7">.</span><span style="color:#F69D50">HTMLAttributes</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">HTMLPreElement</span><span style="color:#ADBAC7">>, </span><span style="color:#F69D50">HTMLPreElement</span><span style="color:#ADBAC7">> </span><span style="color:#F47067">&#x26;</span><span style="color:#ADBAC7"> {</span></span>
<span class="line"><span style="color:#F69D50">    children</span><span style="color:#F47067">?:</span><span style="color:#6CB6FF"> any</span><span style="color:#ADBAC7">;</span></span>
<span class="line"><span style="color:#ADBAC7">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067">async</span><span style="color:#F47067"> function</span><span style="color:#DCBDFB"> CodeSnippet</span><span style="color:#ADBAC7">(</span><span style="color:#F69D50">props</span><span style="color:#F47067">:</span><span style="color:#F69D50"> Props</span><span style="color:#ADBAC7">) {</span></span>
<span class="line"><span style="color:#F47067">    const</span><span style="color:#6CB6FF"> code</span><span style="color:#F47067"> =</span><span style="color:#ADBAC7"> props.children.props.children;</span></span>
<span class="line"><span style="color:#F47067">    const</span><span style="color:#6CB6FF"> lang</span><span style="color:#F47067"> =</span><span style="color:#ADBAC7"> props.children.props.className?.</span><span style="color:#DCBDFB">split</span><span style="color:#ADBAC7">(</span><span style="color:#96D0FF">"language-"</span><span style="color:#ADBAC7">)[</span><span style="color:#6CB6FF">1</span><span style="color:#ADBAC7">] </span><span style="color:#F47067">??</span><span style="color:#96D0FF"> ""</span><span style="color:#ADBAC7">;</span></span>
<span class="line"><span style="color:#F47067">    const</span><span style="color:#6CB6FF"> html</span><span style="color:#F47067"> =</span><span style="color:#F47067"> await</span><span style="color:#DCBDFB"> codeToHtml</span><span style="color:#ADBAC7">(code, { lang, theme: </span><span style="color:#96D0FF">"github-dark-dimmed"</span><span style="color:#ADBAC7"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067">    return</span><span style="color:#ADBAC7"> &#x3C;</span><span style="color:#8DDB8C">div</span><span style="color:#6CB6FF"> dangerouslySetInnerHTML</span><span style="color:#F47067">={</span><span style="color:#ADBAC7">{ __html: html }</span><span style="color:#F47067">}</span><span style="color:#ADBAC7"> />;</span></span>
<span class="line"><span style="color:#ADBAC7">}</span></span>
<span class="line"></span></code></pre>e:["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$18"}}]
